package io.banking.whatsapp.users.domain;

import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import java.time.LocalDateTime;

/**
 * Entity class representing a user in the banking WhatsApp system.
 * This class maps to the 'users' collection in MongoDB and includes
 * all necessary fields to track user information and status.
 *
 * @author Marcelo Alejandro Albarrac√≠n
 * @email marceloalejandro.albarracin@gmail.com
 * @version 1.0.0
 * @since 2024-03-19
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "users")
public class User {
    
    /**
     * The unique identifier for the user.
     * Automatically generated by MongoDB.
     */
    @Id
    private String id;
    
    /**
     * The user's first name.
     * Part of the user's personal information.
     */
    private String firstName;

    /**
     * The user's last name.
     * Part of the user's personal information.
     */
    private String lastName;
    
    /**
     * The user's email address.
     * Must be unique in the system.
     * Used for communications and as a unique identifier.
     */
    @Indexed(unique = true)
    private String email;
    
    /**
     * The user's phone number.
     * Must be unique in the system.
     * Used for WhatsApp communications.
     */
    @Indexed(unique = true)
    private String phoneNumber;
    
    /**
     * The user's DNI (National ID).
     * Must be unique in the system.
     * Used as the primary business identifier for the user.
     */
    @Indexed(unique = true)
    private String dni;
    
    /**
     * The current status of the user.
     * Possible values:
     * - ACTIVE: User can access the system
     * - INACTIVE: User is temporarily disabled
     * - BLOCKED: User is permanently blocked
     */
    private String status;

    /**
     * Timestamp when the user was created.
     * Automatically set during user creation.
     */
    private LocalDateTime createdAt;

    /**
     * Timestamp of the last update to user information.
     * Automatically updated when user data is modified.
     */
    private LocalDateTime updatedAt;

    /**
     * Creates a test instance of User with default values.
     * This method should only be used for testing purposes.
     *
     * @param id the ID to set for the test user
     * @return a User instance with default test values
     */
    public static User createTestUser(String id) {
        return new User(
            id,
            "John",
            "Doe",
            "john.doe@example.com",
            "+1234567890",
            "12345678",
            "ACTIVE",
            LocalDateTime.now(),
            LocalDateTime.now()
        );
    }
}